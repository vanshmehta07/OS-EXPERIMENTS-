#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 10

typedef struct {
    int blockNumber;
    int isAllocated;
} Block;

typedef struct {
    Block blocks[MAX_BLOCKS];
} FileSystem;

void initializeFileSystem(FileSystem *fs) {
    for (int i = 0; i < MAX_BLOCKS; i++) {
        fs->blocks[i].blockNumber = i;
        fs->blocks[i].isAllocated = 0;
    }
}

int allocateBlock(FileSystem *fs) {
    for (int i = 0; i < MAX_BLOCKS; i++) {
        if (fs->blocks[i].isAllocated == 0) {
            fs->blocks[i].isAllocated = 1;
            return fs->blocks[i].blockNumber;
        }
    }
    return -1; // No available blocks
}

void deallocateBlock(FileSystem *fs, int blockNumber) {
    if (blockNumber >= 0 && blockNumber < MAX_BLOCKS) {
        fs->blocks[blockNumber].isAllocated = 0;
    }
}

void displayFileSystem(FileSystem *fs) {
    printf("File System Blocks:\n");
    for (int i = 0; i < MAX_BLOCKS; i++) {
        printf("Block %d: %s\n", fs->blocks[i].blockNumber, 
               fs->blocks[i].isAllocated ? "Allocated" : "Free");
    }
}

int main() {
    FileSystem fs;
    initializeFileSystem(&fs);

    int block1 = allocateBlock(&fs);
    int block2 = allocateBlock(&fs);
    displayFileSystem(&fs);

    deallocateBlock(&fs, block1);
    displayFileSystem(&fs);

    return 0;
}
